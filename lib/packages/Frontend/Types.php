<?php
//namespace ;

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Exception\TApplicationException;


final class TDdlType {
  const SHOW_TABLES = 0;
  const SHOW_DBS = 1;
  const USES = 2;
  const DESCRIBE = 3;
  static public $__names = array(
    0 => 'SHOW_TABLES',
    1 => 'SHOW_DBS',
    2 => 'USES',
    3 => 'DESCRIBE',
  );
}

class TGetTablesParams {
  static $_TSPEC;

  public $db = null;
  public $pattern = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'db',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'pattern',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['db'])) {
        $this->db = $vals['db'];
      }
      if (isset($vals['pattern'])) {
        $this->pattern = $vals['pattern'];
      }
    }
  }

  public function getName() {
    return 'TGetTablesParams';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->db);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pattern);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TGetTablesParams');
    if ($this->db !== null) {
      $xfer += $output->writeFieldBegin('db', TType::STRING, 1);
      $xfer += $output->writeString($this->db);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pattern !== null) {
      $xfer += $output->writeFieldBegin('pattern', TType::STRING, 2);
      $xfer += $output->writeString($this->pattern);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TGetTablesResult {
  static $_TSPEC;

  public $tables = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tables',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tables'])) {
        $this->tables = $vals['tables'];
      }
    }
  }

  public function getName() {
    return 'TGetTablesResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->tables = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              $this->tables []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TGetTablesResult');
    if ($this->tables !== null) {
      if (!is_array($this->tables)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tables', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->tables));
        {
          foreach ($this->tables as $iter6)
          {
            $xfer += $output->writeString($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TGetDbsParams {
  static $_TSPEC;

  public $pattern = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pattern',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pattern'])) {
        $this->pattern = $vals['pattern'];
      }
    }
  }

  public function getName() {
    return 'TGetDbsParams';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pattern);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TGetDbsParams');
    if ($this->pattern !== null) {
      $xfer += $output->writeFieldBegin('pattern', TType::STRING, 1);
      $xfer += $output->writeString($this->pattern);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TGetDbsResult {
  static $_TSPEC;

  public $dbs = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'dbs',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['dbs'])) {
        $this->dbs = $vals['dbs'];
      }
    }
  }

  public function getName() {
    return 'TGetDbsResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->dbs = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $xfer += $input->readString($elem12);
              $this->dbs []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TGetDbsResult');
    if ($this->dbs !== null) {
      if (!is_array($this->dbs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('dbs', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->dbs));
        {
          foreach ($this->dbs as $iter13)
          {
            $xfer += $output->writeString($iter13);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TColumnDesc {
  static $_TSPEC;

  public $columnName = null;
  public $columnType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'columnName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'columnType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['columnName'])) {
        $this->columnName = $vals['columnName'];
      }
      if (isset($vals['columnType'])) {
        $this->columnType = $vals['columnType'];
      }
    }
  }

  public function getName() {
    return 'TColumnDesc';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->columnName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->columnType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TColumnDesc');
    if ($this->columnName !== null) {
      $xfer += $output->writeFieldBegin('columnName', TType::STRING, 1);
      $xfer += $output->writeString($this->columnName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->columnType !== null) {
      $xfer += $output->writeFieldBegin('columnType', TType::I32, 2);
      $xfer += $output->writeI32($this->columnType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TDescribeTableParams {
  static $_TSPEC;

  public $db = null;
  public $table_name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'db',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'table_name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['db'])) {
        $this->db = $vals['db'];
      }
      if (isset($vals['table_name'])) {
        $this->table_name = $vals['table_name'];
      }
    }
  }

  public function getName() {
    return 'TDescribeTableParams';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->db);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->table_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TDescribeTableParams');
    if ($this->db !== null) {
      $xfer += $output->writeFieldBegin('db', TType::STRING, 1);
      $xfer += $output->writeString($this->db);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->table_name !== null) {
      $xfer += $output->writeFieldBegin('table_name', TType::STRING, 2);
      $xfer += $output->writeString($this->table_name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TDescribeTableResult {
  static $_TSPEC;

  public $columns = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TColumnDesc',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['columns'])) {
        $this->columns = $vals['columns'];
      }
    }
  }

  public function getName() {
    return 'TDescribeTableResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->columns = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \TColumnDesc();
              $xfer += $elem19->read($input);
              $this->columns []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TDescribeTableResult');
    if ($this->columns !== null) {
      if (!is_array($this->columns)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('columns', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->columns));
        {
          foreach ($this->columns as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TSessionState {
  static $_TSPEC;

  public $database = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'database',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['database'])) {
        $this->database = $vals['database'];
      }
    }
  }

  public function getName() {
    return 'TSessionState';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->database);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TSessionState');
    if ($this->database !== null) {
      $xfer += $output->writeFieldBegin('database', TType::STRING, 1);
      $xfer += $output->writeString($this->database);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TClientRequest {
  static $_TSPEC;

  public $stmt = null;
  public $queryOptions = null;
  public $sessionState = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'stmt',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'queryOptions',
          'type' => TType::STRUCT,
          'class' => '\TQueryOptions',
          ),
        3 => array(
          'var' => 'sessionState',
          'type' => TType::STRUCT,
          'class' => '\TSessionState',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['stmt'])) {
        $this->stmt = $vals['stmt'];
      }
      if (isset($vals['queryOptions'])) {
        $this->queryOptions = $vals['queryOptions'];
      }
      if (isset($vals['sessionState'])) {
        $this->sessionState = $vals['sessionState'];
      }
    }
  }

  public function getName() {
    return 'TClientRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->stmt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->queryOptions = new \TQueryOptions();
            $xfer += $this->queryOptions->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->sessionState = new \TSessionState();
            $xfer += $this->sessionState->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TClientRequest');
    if ($this->stmt !== null) {
      $xfer += $output->writeFieldBegin('stmt', TType::STRING, 1);
      $xfer += $output->writeString($this->stmt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->queryOptions !== null) {
      if (!is_object($this->queryOptions)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('queryOptions', TType::STRUCT, 2);
      $xfer += $this->queryOptions->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionState !== null) {
      if (!is_object($this->sessionState)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('sessionState', TType::STRUCT, 3);
      $xfer += $this->sessionState->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultSetMetadata {
  static $_TSPEC;

  public $columnDescs = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'columnDescs',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TColumnDesc',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['columnDescs'])) {
        $this->columnDescs = $vals['columnDescs'];
      }
    }
  }

  public function getName() {
    return 'TResultSetMetadata';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->columnDescs = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new \TColumnDesc();
              $xfer += $elem26->read($input);
              $this->columnDescs []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultSetMetadata');
    if ($this->columnDescs !== null) {
      if (!is_array($this->columnDescs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('columnDescs', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->columnDescs));
        {
          foreach ($this->columnDescs as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCatalogUpdate {
  static $_TSPEC;

  public $target_table = null;
  public $db_name = null;
  public $created_partitions = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'target_table',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'db_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'created_partitions',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['target_table'])) {
        $this->target_table = $vals['target_table'];
      }
      if (isset($vals['db_name'])) {
        $this->db_name = $vals['db_name'];
      }
      if (isset($vals['created_partitions'])) {
        $this->created_partitions = $vals['created_partitions'];
      }
    }
  }

  public function getName() {
    return 'TCatalogUpdate';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->target_table);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->db_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::SET) {
            $this->created_partitions = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readSetBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $xfer += $input->readString($elem33);
              if (is_scalar($elem33)) {
                $this->created_partitions[$elem33] = true;
              } else {
                $this->created_partitions []= $elem33;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCatalogUpdate');
    if ($this->target_table !== null) {
      $xfer += $output->writeFieldBegin('target_table', TType::STRING, 1);
      $xfer += $output->writeString($this->target_table);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->db_name !== null) {
      $xfer += $output->writeFieldBegin('db_name', TType::STRING, 2);
      $xfer += $output->writeString($this->db_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->created_partitions !== null) {
      if (!is_array($this->created_partitions)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('created_partitions', TType::SET, 3);
      {
        $output->writeSetBegin(TType::STRING, count($this->created_partitions));
        {
          foreach ($this->created_partitions as $iter34 => $iter35)
          {
            if (is_scalar($iter35)) {
            $xfer += $output->writeString($iter34);
            } else {
            $xfer += $output->writeString($iter35);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TFinalizeParams {
  static $_TSPEC;

  public $is_overwrite = null;
  public $hdfs_base_dir = null;
  public $table_name = null;
  public $table_db = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'is_overwrite',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'hdfs_base_dir',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'table_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'table_db',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['is_overwrite'])) {
        $this->is_overwrite = $vals['is_overwrite'];
      }
      if (isset($vals['hdfs_base_dir'])) {
        $this->hdfs_base_dir = $vals['hdfs_base_dir'];
      }
      if (isset($vals['table_name'])) {
        $this->table_name = $vals['table_name'];
      }
      if (isset($vals['table_db'])) {
        $this->table_db = $vals['table_db'];
      }
    }
  }

  public function getName() {
    return 'TFinalizeParams';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_overwrite);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->hdfs_base_dir);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->table_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->table_db);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TFinalizeParams');
    if ($this->is_overwrite !== null) {
      $xfer += $output->writeFieldBegin('is_overwrite', TType::BOOL, 1);
      $xfer += $output->writeBool($this->is_overwrite);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hdfs_base_dir !== null) {
      $xfer += $output->writeFieldBegin('hdfs_base_dir', TType::STRING, 2);
      $xfer += $output->writeString($this->hdfs_base_dir);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->table_name !== null) {
      $xfer += $output->writeFieldBegin('table_name', TType::STRING, 3);
      $xfer += $output->writeString($this->table_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->table_db !== null) {
      $xfer += $output->writeFieldBegin('table_db', TType::STRING, 4);
      $xfer += $output->writeString($this->table_db);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TQueryExecRequest {
  static $_TSPEC;

  public $desc_tbl = null;
  public $fragments = null;
  public $dest_fragment_idx = null;
  public $per_node_scan_ranges = null;
  public $result_set_metadata = null;
  public $finalize_params = null;
  public $query_globals = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'desc_tbl',
          'type' => TType::STRUCT,
          'class' => '\TDescriptorTable',
          ),
        2 => array(
          'var' => 'fragments',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TPlanFragment',
            ),
          ),
        3 => array(
          'var' => 'dest_fragment_idx',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        4 => array(
          'var' => 'per_node_scan_ranges',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::LST,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\TScanRangeLocations',
              ),
            ),
          ),
        5 => array(
          'var' => 'result_set_metadata',
          'type' => TType::STRUCT,
          'class' => '\TResultSetMetadata',
          ),
        6 => array(
          'var' => 'finalize_params',
          'type' => TType::STRUCT,
          'class' => '\TFinalizeParams',
          ),
        7 => array(
          'var' => 'query_globals',
          'type' => TType::STRUCT,
          'class' => '\TQueryGlobals',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['desc_tbl'])) {
        $this->desc_tbl = $vals['desc_tbl'];
      }
      if (isset($vals['fragments'])) {
        $this->fragments = $vals['fragments'];
      }
      if (isset($vals['dest_fragment_idx'])) {
        $this->dest_fragment_idx = $vals['dest_fragment_idx'];
      }
      if (isset($vals['per_node_scan_ranges'])) {
        $this->per_node_scan_ranges = $vals['per_node_scan_ranges'];
      }
      if (isset($vals['result_set_metadata'])) {
        $this->result_set_metadata = $vals['result_set_metadata'];
      }
      if (isset($vals['finalize_params'])) {
        $this->finalize_params = $vals['finalize_params'];
      }
      if (isset($vals['query_globals'])) {
        $this->query_globals = $vals['query_globals'];
      }
    }
  }

  public function getName() {
    return 'TQueryExecRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->desc_tbl = new \TDescriptorTable();
            $xfer += $this->desc_tbl->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->fragments = array();
            $_size36 = 0;
            $_etype39 = 0;
            $xfer += $input->readListBegin($_etype39, $_size36);
            for ($_i40 = 0; $_i40 < $_size36; ++$_i40)
            {
              $elem41 = null;
              $elem41 = new \TPlanFragment();
              $xfer += $elem41->read($input);
              $this->fragments []= $elem41;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->dest_fragment_idx = array();
            $_size42 = 0;
            $_etype45 = 0;
            $xfer += $input->readListBegin($_etype45, $_size42);
            for ($_i46 = 0; $_i46 < $_size42; ++$_i46)
            {
              $elem47 = null;
              $xfer += $input->readI32($elem47);
              $this->dest_fragment_idx []= $elem47;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->per_node_scan_ranges = array();
            $_size48 = 0;
            $_ktype49 = 0;
            $_vtype50 = 0;
            $xfer += $input->readMapBegin($_ktype49, $_vtype50, $_size48);
            for ($_i52 = 0; $_i52 < $_size48; ++$_i52)
            {
              $key53 = 0;
              $val54 = array();
              $xfer += $input->readI32($key53);
              $val54 = array();
              $_size55 = 0;
              $_etype58 = 0;
              $xfer += $input->readListBegin($_etype58, $_size55);
              for ($_i59 = 0; $_i59 < $_size55; ++$_i59)
              {
                $elem60 = null;
                $elem60 = new \TScanRangeLocations();
                $xfer += $elem60->read($input);
                $val54 []= $elem60;
              }
              $xfer += $input->readListEnd();
              $this->per_node_scan_ranges[$key53] = $val54;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->result_set_metadata = new \TResultSetMetadata();
            $xfer += $this->result_set_metadata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->finalize_params = new \TFinalizeParams();
            $xfer += $this->finalize_params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->query_globals = new \TQueryGlobals();
            $xfer += $this->query_globals->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TQueryExecRequest');
    if ($this->desc_tbl !== null) {
      if (!is_object($this->desc_tbl)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('desc_tbl', TType::STRUCT, 1);
      $xfer += $this->desc_tbl->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fragments !== null) {
      if (!is_array($this->fragments)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fragments', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->fragments));
        {
          foreach ($this->fragments as $iter61)
          {
            $xfer += $iter61->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dest_fragment_idx !== null) {
      if (!is_array($this->dest_fragment_idx)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('dest_fragment_idx', TType::LST, 3);
      {
        $output->writeListBegin(TType::I32, count($this->dest_fragment_idx));
        {
          foreach ($this->dest_fragment_idx as $iter62)
          {
            $xfer += $output->writeI32($iter62);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->per_node_scan_ranges !== null) {
      if (!is_array($this->per_node_scan_ranges)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('per_node_scan_ranges', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::I32, TType::LST, count($this->per_node_scan_ranges));
        {
          foreach ($this->per_node_scan_ranges as $kiter63 => $viter64)
          {
            $xfer += $output->writeI32($kiter63);
            {
              $output->writeListBegin(TType::STRUCT, count($viter64));
              {
                foreach ($viter64 as $iter65)
                {
                  $xfer += $iter65->write($output);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->result_set_metadata !== null) {
      if (!is_object($this->result_set_metadata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('result_set_metadata', TType::STRUCT, 5);
      $xfer += $this->result_set_metadata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->finalize_params !== null) {
      if (!is_object($this->finalize_params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('finalize_params', TType::STRUCT, 6);
      $xfer += $this->finalize_params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->query_globals !== null) {
      if (!is_object($this->query_globals)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('query_globals', TType::STRUCT, 7);
      $xfer += $this->query_globals->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TDdlExecRequest {
  static $_TSPEC;

  public $ddl_type = null;
  public $database = null;
  public $describe_table = null;
  public $show_pattern = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ddl_type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'database',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'describe_table',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'show_pattern',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ddl_type'])) {
        $this->ddl_type = $vals['ddl_type'];
      }
      if (isset($vals['database'])) {
        $this->database = $vals['database'];
      }
      if (isset($vals['describe_table'])) {
        $this->describe_table = $vals['describe_table'];
      }
      if (isset($vals['show_pattern'])) {
        $this->show_pattern = $vals['show_pattern'];
      }
    }
  }

  public function getName() {
    return 'TDdlExecRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ddl_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->database);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->describe_table);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->show_pattern);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TDdlExecRequest');
    if ($this->ddl_type !== null) {
      $xfer += $output->writeFieldBegin('ddl_type', TType::I32, 1);
      $xfer += $output->writeI32($this->ddl_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->database !== null) {
      $xfer += $output->writeFieldBegin('database', TType::STRING, 2);
      $xfer += $output->writeString($this->database);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->describe_table !== null) {
      $xfer += $output->writeFieldBegin('describe_table', TType::STRING, 3);
      $xfer += $output->writeString($this->describe_table);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->show_pattern !== null) {
      $xfer += $output->writeFieldBegin('show_pattern', TType::STRING, 4);
      $xfer += $output->writeString($this->show_pattern);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TExecRequest {
  static $_TSPEC;

  public $stmt_type = null;
  public $sql_stmt = null;
  public $request_id = null;
  public $query_options = null;
  public $query_exec_request = null;
  public $ddl_exec_request = null;
  public $result_set_metadata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'stmt_type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'sql_stmt',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'request_id',
          'type' => TType::STRUCT,
          'class' => '\TUniqueId',
          ),
        4 => array(
          'var' => 'query_options',
          'type' => TType::STRUCT,
          'class' => '\TQueryOptions',
          ),
        5 => array(
          'var' => 'query_exec_request',
          'type' => TType::STRUCT,
          'class' => '\TQueryExecRequest',
          ),
        6 => array(
          'var' => 'ddl_exec_request',
          'type' => TType::STRUCT,
          'class' => '\TDdlExecRequest',
          ),
        7 => array(
          'var' => 'result_set_metadata',
          'type' => TType::STRUCT,
          'class' => '\TResultSetMetadata',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['stmt_type'])) {
        $this->stmt_type = $vals['stmt_type'];
      }
      if (isset($vals['sql_stmt'])) {
        $this->sql_stmt = $vals['sql_stmt'];
      }
      if (isset($vals['request_id'])) {
        $this->request_id = $vals['request_id'];
      }
      if (isset($vals['query_options'])) {
        $this->query_options = $vals['query_options'];
      }
      if (isset($vals['query_exec_request'])) {
        $this->query_exec_request = $vals['query_exec_request'];
      }
      if (isset($vals['ddl_exec_request'])) {
        $this->ddl_exec_request = $vals['ddl_exec_request'];
      }
      if (isset($vals['result_set_metadata'])) {
        $this->result_set_metadata = $vals['result_set_metadata'];
      }
    }
  }

  public function getName() {
    return 'TExecRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->stmt_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sql_stmt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->request_id = new \TUniqueId();
            $xfer += $this->request_id->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->query_options = new \TQueryOptions();
            $xfer += $this->query_options->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->query_exec_request = new \TQueryExecRequest();
            $xfer += $this->query_exec_request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->ddl_exec_request = new \TDdlExecRequest();
            $xfer += $this->ddl_exec_request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->result_set_metadata = new \TResultSetMetadata();
            $xfer += $this->result_set_metadata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TExecRequest');
    if ($this->stmt_type !== null) {
      $xfer += $output->writeFieldBegin('stmt_type', TType::I32, 1);
      $xfer += $output->writeI32($this->stmt_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sql_stmt !== null) {
      $xfer += $output->writeFieldBegin('sql_stmt', TType::STRING, 2);
      $xfer += $output->writeString($this->sql_stmt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->request_id !== null) {
      if (!is_object($this->request_id)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request_id', TType::STRUCT, 3);
      $xfer += $this->request_id->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->query_options !== null) {
      if (!is_object($this->query_options)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('query_options', TType::STRUCT, 4);
      $xfer += $this->query_options->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->query_exec_request !== null) {
      if (!is_object($this->query_exec_request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('query_exec_request', TType::STRUCT, 5);
      $xfer += $this->query_exec_request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ddl_exec_request !== null) {
      if (!is_object($this->ddl_exec_request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ddl_exec_request', TType::STRUCT, 6);
      $xfer += $this->ddl_exec_request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->result_set_metadata !== null) {
      if (!is_object($this->result_set_metadata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('result_set_metadata', TType::STRUCT, 7);
      $xfer += $this->result_set_metadata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


