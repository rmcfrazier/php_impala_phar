<?php
//namespace ;

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Exception\TApplicationException;


final class ImpalaInternalServiceVersion {
  const V1 = 0;
  static public $__names = array(
    0 => 'V1',
  );
}

class TQueryOptions {
  static $_TSPEC;

  public $abort_on_error = false;
  public $max_errors = 0;
  public $disable_codegen = false;
  public $batch_size = 0;
  public $return_as_ascii = true;
  public $num_nodes = 0;
  public $max_scan_range_length = 0;
  public $num_scanner_threads = 0;
  public $max_io_buffers = 0;
  public $allow_unsupported_formats = false;
  public $default_order_by_limit = -1;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'abort_on_error',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'max_errors',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'disable_codegen',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'batch_size',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'return_as_ascii',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'num_nodes',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'max_scan_range_length',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'num_scanner_threads',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'max_io_buffers',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'allow_unsupported_formats',
          'type' => TType::BOOL,
          ),
        11 => array(
          'var' => 'default_order_by_limit',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['abort_on_error'])) {
        $this->abort_on_error = $vals['abort_on_error'];
      }
      if (isset($vals['max_errors'])) {
        $this->max_errors = $vals['max_errors'];
      }
      if (isset($vals['disable_codegen'])) {
        $this->disable_codegen = $vals['disable_codegen'];
      }
      if (isset($vals['batch_size'])) {
        $this->batch_size = $vals['batch_size'];
      }
      if (isset($vals['return_as_ascii'])) {
        $this->return_as_ascii = $vals['return_as_ascii'];
      }
      if (isset($vals['num_nodes'])) {
        $this->num_nodes = $vals['num_nodes'];
      }
      if (isset($vals['max_scan_range_length'])) {
        $this->max_scan_range_length = $vals['max_scan_range_length'];
      }
      if (isset($vals['num_scanner_threads'])) {
        $this->num_scanner_threads = $vals['num_scanner_threads'];
      }
      if (isset($vals['max_io_buffers'])) {
        $this->max_io_buffers = $vals['max_io_buffers'];
      }
      if (isset($vals['allow_unsupported_formats'])) {
        $this->allow_unsupported_formats = $vals['allow_unsupported_formats'];
      }
      if (isset($vals['default_order_by_limit'])) {
        $this->default_order_by_limit = $vals['default_order_by_limit'];
      }
    }
  }

  public function getName() {
    return 'TQueryOptions';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->abort_on_error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->max_errors);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->disable_codegen);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->batch_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->return_as_ascii);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->num_nodes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->max_scan_range_length);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->num_scanner_threads);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->max_io_buffers);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->allow_unsupported_formats);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->default_order_by_limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TQueryOptions');
    if ($this->abort_on_error !== null) {
      $xfer += $output->writeFieldBegin('abort_on_error', TType::BOOL, 1);
      $xfer += $output->writeBool($this->abort_on_error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->max_errors !== null) {
      $xfer += $output->writeFieldBegin('max_errors', TType::I32, 2);
      $xfer += $output->writeI32($this->max_errors);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->disable_codegen !== null) {
      $xfer += $output->writeFieldBegin('disable_codegen', TType::BOOL, 3);
      $xfer += $output->writeBool($this->disable_codegen);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batch_size !== null) {
      $xfer += $output->writeFieldBegin('batch_size', TType::I32, 4);
      $xfer += $output->writeI32($this->batch_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->return_as_ascii !== null) {
      $xfer += $output->writeFieldBegin('return_as_ascii', TType::BOOL, 5);
      $xfer += $output->writeBool($this->return_as_ascii);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->num_nodes !== null) {
      $xfer += $output->writeFieldBegin('num_nodes', TType::I32, 6);
      $xfer += $output->writeI32($this->num_nodes);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->max_scan_range_length !== null) {
      $xfer += $output->writeFieldBegin('max_scan_range_length', TType::I64, 7);
      $xfer += $output->writeI64($this->max_scan_range_length);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->num_scanner_threads !== null) {
      $xfer += $output->writeFieldBegin('num_scanner_threads', TType::I32, 8);
      $xfer += $output->writeI32($this->num_scanner_threads);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->max_io_buffers !== null) {
      $xfer += $output->writeFieldBegin('max_io_buffers', TType::I32, 9);
      $xfer += $output->writeI32($this->max_io_buffers);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->allow_unsupported_formats !== null) {
      $xfer += $output->writeFieldBegin('allow_unsupported_formats', TType::BOOL, 10);
      $xfer += $output->writeBool($this->allow_unsupported_formats);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->default_order_by_limit !== null) {
      $xfer += $output->writeFieldBegin('default_order_by_limit', TType::I64, 11);
      $xfer += $output->writeI64($this->default_order_by_limit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TScanRangeParams {
  static $_TSPEC;

  public $scan_range = null;
  public $volume_id = -1;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'scan_range',
          'type' => TType::STRUCT,
          'class' => '\TScanRange',
          ),
        2 => array(
          'var' => 'volume_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['scan_range'])) {
        $this->scan_range = $vals['scan_range'];
      }
      if (isset($vals['volume_id'])) {
        $this->volume_id = $vals['volume_id'];
      }
    }
  }

  public function getName() {
    return 'TScanRangeParams';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->scan_range = new \TScanRange();
            $xfer += $this->scan_range->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->volume_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TScanRangeParams');
    if ($this->scan_range !== null) {
      if (!is_object($this->scan_range)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('scan_range', TType::STRUCT, 1);
      $xfer += $this->scan_range->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->volume_id !== null) {
      $xfer += $output->writeFieldBegin('volume_id', TType::I32, 2);
      $xfer += $output->writeI32($this->volume_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TPlanFragmentDestination {
  static $_TSPEC;

  public $fragment_instance_id = null;
  public $server = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'fragment_instance_id',
          'type' => TType::STRUCT,
          'class' => '\TUniqueId',
          ),
        2 => array(
          'var' => 'server',
          'type' => TType::STRUCT,
          'class' => '\THostPort',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['fragment_instance_id'])) {
        $this->fragment_instance_id = $vals['fragment_instance_id'];
      }
      if (isset($vals['server'])) {
        $this->server = $vals['server'];
      }
    }
  }

  public function getName() {
    return 'TPlanFragmentDestination';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->fragment_instance_id = new \TUniqueId();
            $xfer += $this->fragment_instance_id->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->server = new \THostPort();
            $xfer += $this->server->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TPlanFragmentDestination');
    if ($this->fragment_instance_id !== null) {
      if (!is_object($this->fragment_instance_id)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fragment_instance_id', TType::STRUCT, 1);
      $xfer += $this->fragment_instance_id->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->server !== null) {
      if (!is_object($this->server)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('server', TType::STRUCT, 2);
      $xfer += $this->server->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TPlanFragmentExecParams {
  static $_TSPEC;

  public $query_id = null;
  public $fragment_instance_id = null;
  public $per_node_scan_ranges = null;
  public $per_exch_num_senders = null;
  public $destinations = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_id',
          'type' => TType::STRUCT,
          'class' => '\TUniqueId',
          ),
        2 => array(
          'var' => 'fragment_instance_id',
          'type' => TType::STRUCT,
          'class' => '\TUniqueId',
          ),
        3 => array(
          'var' => 'per_node_scan_ranges',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::LST,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\TScanRangeParams',
              ),
            ),
          ),
        4 => array(
          'var' => 'per_exch_num_senders',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        5 => array(
          'var' => 'destinations',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TPlanFragmentDestination',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['query_id'])) {
        $this->query_id = $vals['query_id'];
      }
      if (isset($vals['fragment_instance_id'])) {
        $this->fragment_instance_id = $vals['fragment_instance_id'];
      }
      if (isset($vals['per_node_scan_ranges'])) {
        $this->per_node_scan_ranges = $vals['per_node_scan_ranges'];
      }
      if (isset($vals['per_exch_num_senders'])) {
        $this->per_exch_num_senders = $vals['per_exch_num_senders'];
      }
      if (isset($vals['destinations'])) {
        $this->destinations = $vals['destinations'];
      }
    }
  }

  public function getName() {
    return 'TPlanFragmentExecParams';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->query_id = new \TUniqueId();
            $xfer += $this->query_id->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->fragment_instance_id = new \TUniqueId();
            $xfer += $this->fragment_instance_id->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->per_node_scan_ranges = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = 0;
              $val6 = array();
              $xfer += $input->readI32($key5);
              $val6 = array();
              $_size7 = 0;
              $_etype10 = 0;
              $xfer += $input->readListBegin($_etype10, $_size7);
              for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
              {
                $elem12 = null;
                $elem12 = new \TScanRangeParams();
                $xfer += $elem12->read($input);
                $val6 []= $elem12;
              }
              $xfer += $input->readListEnd();
              $this->per_node_scan_ranges[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->per_exch_num_senders = array();
            $_size13 = 0;
            $_ktype14 = 0;
            $_vtype15 = 0;
            $xfer += $input->readMapBegin($_ktype14, $_vtype15, $_size13);
            for ($_i17 = 0; $_i17 < $_size13; ++$_i17)
            {
              $key18 = 0;
              $val19 = 0;
              $xfer += $input->readI32($key18);
              $xfer += $input->readI32($val19);
              $this->per_exch_num_senders[$key18] = $val19;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->destinations = array();
            $_size20 = 0;
            $_etype23 = 0;
            $xfer += $input->readListBegin($_etype23, $_size20);
            for ($_i24 = 0; $_i24 < $_size20; ++$_i24)
            {
              $elem25 = null;
              $elem25 = new \TPlanFragmentDestination();
              $xfer += $elem25->read($input);
              $this->destinations []= $elem25;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TPlanFragmentExecParams');
    if ($this->query_id !== null) {
      if (!is_object($this->query_id)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('query_id', TType::STRUCT, 1);
      $xfer += $this->query_id->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fragment_instance_id !== null) {
      if (!is_object($this->fragment_instance_id)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fragment_instance_id', TType::STRUCT, 2);
      $xfer += $this->fragment_instance_id->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->per_node_scan_ranges !== null) {
      if (!is_array($this->per_node_scan_ranges)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('per_node_scan_ranges', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::I32, TType::LST, count($this->per_node_scan_ranges));
        {
          foreach ($this->per_node_scan_ranges as $kiter26 => $viter27)
          {
            $xfer += $output->writeI32($kiter26);
            {
              $output->writeListBegin(TType::STRUCT, count($viter27));
              {
                foreach ($viter27 as $iter28)
                {
                  $xfer += $iter28->write($output);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->per_exch_num_senders !== null) {
      if (!is_array($this->per_exch_num_senders)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('per_exch_num_senders', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::I32, TType::I32, count($this->per_exch_num_senders));
        {
          foreach ($this->per_exch_num_senders as $kiter29 => $viter30)
          {
            $xfer += $output->writeI32($kiter29);
            $xfer += $output->writeI32($viter30);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->destinations !== null) {
      if (!is_array($this->destinations)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('destinations', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->destinations));
        {
          foreach ($this->destinations as $iter31)
          {
            $xfer += $iter31->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TQueryGlobals {
  static $_TSPEC;

  public $now_string = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'now_string',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['now_string'])) {
        $this->now_string = $vals['now_string'];
      }
    }
  }

  public function getName() {
    return 'TQueryGlobals';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->now_string);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TQueryGlobals');
    if ($this->now_string !== null) {
      $xfer += $output->writeFieldBegin('now_string', TType::STRING, 1);
      $xfer += $output->writeString($this->now_string);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TExecPlanFragmentParams {
  static $_TSPEC;

  public $protocol_version = null;
  public $fragment = null;
  public $desc_tbl = null;
  public $params = null;
  public $coord = null;
  public $backend_num = null;
  public $query_globals = null;
  public $query_options = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'protocol_version',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'fragment',
          'type' => TType::STRUCT,
          'class' => '\TPlanFragment',
          ),
        3 => array(
          'var' => 'desc_tbl',
          'type' => TType::STRUCT,
          'class' => '\TDescriptorTable',
          ),
        4 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\TPlanFragmentExecParams',
          ),
        5 => array(
          'var' => 'coord',
          'type' => TType::STRUCT,
          'class' => '\THostPort',
          ),
        6 => array(
          'var' => 'backend_num',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'query_globals',
          'type' => TType::STRUCT,
          'class' => '\TQueryGlobals',
          ),
        8 => array(
          'var' => 'query_options',
          'type' => TType::STRUCT,
          'class' => '\TQueryOptions',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['protocol_version'])) {
        $this->protocol_version = $vals['protocol_version'];
      }
      if (isset($vals['fragment'])) {
        $this->fragment = $vals['fragment'];
      }
      if (isset($vals['desc_tbl'])) {
        $this->desc_tbl = $vals['desc_tbl'];
      }
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['coord'])) {
        $this->coord = $vals['coord'];
      }
      if (isset($vals['backend_num'])) {
        $this->backend_num = $vals['backend_num'];
      }
      if (isset($vals['query_globals'])) {
        $this->query_globals = $vals['query_globals'];
      }
      if (isset($vals['query_options'])) {
        $this->query_options = $vals['query_options'];
      }
    }
  }

  public function getName() {
    return 'TExecPlanFragmentParams';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->protocol_version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->fragment = new \TPlanFragment();
            $xfer += $this->fragment->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->desc_tbl = new \TDescriptorTable();
            $xfer += $this->desc_tbl->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->params = new \TPlanFragmentExecParams();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->coord = new \THostPort();
            $xfer += $this->coord->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->backend_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->query_globals = new \TQueryGlobals();
            $xfer += $this->query_globals->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->query_options = new \TQueryOptions();
            $xfer += $this->query_options->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TExecPlanFragmentParams');
    if ($this->protocol_version !== null) {
      $xfer += $output->writeFieldBegin('protocol_version', TType::I32, 1);
      $xfer += $output->writeI32($this->protocol_version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fragment !== null) {
      if (!is_object($this->fragment)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fragment', TType::STRUCT, 2);
      $xfer += $this->fragment->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc_tbl !== null) {
      if (!is_object($this->desc_tbl)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('desc_tbl', TType::STRUCT, 3);
      $xfer += $this->desc_tbl->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 4);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->coord !== null) {
      if (!is_object($this->coord)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('coord', TType::STRUCT, 5);
      $xfer += $this->coord->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backend_num !== null) {
      $xfer += $output->writeFieldBegin('backend_num', TType::I32, 6);
      $xfer += $output->writeI32($this->backend_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->query_globals !== null) {
      if (!is_object($this->query_globals)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('query_globals', TType::STRUCT, 7);
      $xfer += $this->query_globals->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->query_options !== null) {
      if (!is_object($this->query_options)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('query_options', TType::STRUCT, 8);
      $xfer += $this->query_options->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TExecPlanFragmentResult {
  static $_TSPEC;

  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => '\TStatus',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'TExecPlanFragmentResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new \TStatus();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TExecPlanFragmentResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TInsertExecStatus {
  static $_TSPEC;

  public $num_appended_rows = null;
  public $files_to_move = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'num_appended_rows',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I64,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'files_to_move',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['num_appended_rows'])) {
        $this->num_appended_rows = $vals['num_appended_rows'];
      }
      if (isset($vals['files_to_move'])) {
        $this->files_to_move = $vals['files_to_move'];
      }
    }
  }

  public function getName() {
    return 'TInsertExecStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->num_appended_rows = array();
            $_size32 = 0;
            $_ktype33 = 0;
            $_vtype34 = 0;
            $xfer += $input->readMapBegin($_ktype33, $_vtype34, $_size32);
            for ($_i36 = 0; $_i36 < $_size32; ++$_i36)
            {
              $key37 = '';
              $val38 = 0;
              $xfer += $input->readString($key37);
              $xfer += $input->readI64($val38);
              $this->num_appended_rows[$key37] = $val38;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->files_to_move = array();
            $_size39 = 0;
            $_ktype40 = 0;
            $_vtype41 = 0;
            $xfer += $input->readMapBegin($_ktype40, $_vtype41, $_size39);
            for ($_i43 = 0; $_i43 < $_size39; ++$_i43)
            {
              $key44 = '';
              $val45 = '';
              $xfer += $input->readString($key44);
              $xfer += $input->readString($val45);
              $this->files_to_move[$key44] = $val45;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TInsertExecStatus');
    if ($this->num_appended_rows !== null) {
      if (!is_array($this->num_appended_rows)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('num_appended_rows', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->num_appended_rows));
        {
          foreach ($this->num_appended_rows as $kiter46 => $viter47)
          {
            $xfer += $output->writeString($kiter46);
            $xfer += $output->writeI64($viter47);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->files_to_move !== null) {
      if (!is_array($this->files_to_move)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('files_to_move', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->files_to_move));
        {
          foreach ($this->files_to_move as $kiter48 => $viter49)
          {
            $xfer += $output->writeString($kiter48);
            $xfer += $output->writeString($viter49);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TReportExecStatusParams {
  static $_TSPEC;

  public $protocol_version = null;
  public $query_id = null;
  public $backend_num = null;
  public $fragment_instance_id = null;
  public $status = null;
  public $done = null;
  public $profile = null;
  public $insert_exec_status = null;
  public $error_log = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'protocol_version',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'query_id',
          'type' => TType::STRUCT,
          'class' => '\TUniqueId',
          ),
        3 => array(
          'var' => 'backend_num',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'fragment_instance_id',
          'type' => TType::STRUCT,
          'class' => '\TUniqueId',
          ),
        5 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => '\TStatus',
          ),
        6 => array(
          'var' => 'done',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'profile',
          'type' => TType::STRUCT,
          'class' => '\TRuntimeProfileTree',
          ),
        8 => array(
          'var' => 'insert_exec_status',
          'type' => TType::STRUCT,
          'class' => '\TInsertExecStatus',
          ),
        9 => array(
          'var' => 'error_log',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['protocol_version'])) {
        $this->protocol_version = $vals['protocol_version'];
      }
      if (isset($vals['query_id'])) {
        $this->query_id = $vals['query_id'];
      }
      if (isset($vals['backend_num'])) {
        $this->backend_num = $vals['backend_num'];
      }
      if (isset($vals['fragment_instance_id'])) {
        $this->fragment_instance_id = $vals['fragment_instance_id'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['done'])) {
        $this->done = $vals['done'];
      }
      if (isset($vals['profile'])) {
        $this->profile = $vals['profile'];
      }
      if (isset($vals['insert_exec_status'])) {
        $this->insert_exec_status = $vals['insert_exec_status'];
      }
      if (isset($vals['error_log'])) {
        $this->error_log = $vals['error_log'];
      }
    }
  }

  public function getName() {
    return 'TReportExecStatusParams';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->protocol_version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->query_id = new \TUniqueId();
            $xfer += $this->query_id->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->backend_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->fragment_instance_id = new \TUniqueId();
            $xfer += $this->fragment_instance_id->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->status = new \TStatus();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->done);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->profile = new \TRuntimeProfileTree();
            $xfer += $this->profile->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->insert_exec_status = new \TInsertExecStatus();
            $xfer += $this->insert_exec_status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->error_log = array();
            $_size50 = 0;
            $_etype53 = 0;
            $xfer += $input->readListBegin($_etype53, $_size50);
            for ($_i54 = 0; $_i54 < $_size50; ++$_i54)
            {
              $elem55 = null;
              $xfer += $input->readString($elem55);
              $this->error_log []= $elem55;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TReportExecStatusParams');
    if ($this->protocol_version !== null) {
      $xfer += $output->writeFieldBegin('protocol_version', TType::I32, 1);
      $xfer += $output->writeI32($this->protocol_version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->query_id !== null) {
      if (!is_object($this->query_id)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('query_id', TType::STRUCT, 2);
      $xfer += $this->query_id->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backend_num !== null) {
      $xfer += $output->writeFieldBegin('backend_num', TType::I32, 3);
      $xfer += $output->writeI32($this->backend_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fragment_instance_id !== null) {
      if (!is_object($this->fragment_instance_id)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fragment_instance_id', TType::STRUCT, 4);
      $xfer += $this->fragment_instance_id->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 5);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->done !== null) {
      $xfer += $output->writeFieldBegin('done', TType::BOOL, 6);
      $xfer += $output->writeBool($this->done);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profile !== null) {
      if (!is_object($this->profile)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('profile', TType::STRUCT, 7);
      $xfer += $this->profile->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->insert_exec_status !== null) {
      if (!is_object($this->insert_exec_status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('insert_exec_status', TType::STRUCT, 8);
      $xfer += $this->insert_exec_status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error_log !== null) {
      if (!is_array($this->error_log)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error_log', TType::LST, 9);
      {
        $output->writeListBegin(TType::STRING, count($this->error_log));
        {
          foreach ($this->error_log as $iter56)
          {
            $xfer += $output->writeString($iter56);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TReportExecStatusResult {
  static $_TSPEC;

  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => '\TStatus',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'TReportExecStatusResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new \TStatus();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TReportExecStatusResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCancelPlanFragmentParams {
  static $_TSPEC;

  public $protocol_version = null;
  public $fragment_instance_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'protocol_version',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'fragment_instance_id',
          'type' => TType::STRUCT,
          'class' => '\TUniqueId',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['protocol_version'])) {
        $this->protocol_version = $vals['protocol_version'];
      }
      if (isset($vals['fragment_instance_id'])) {
        $this->fragment_instance_id = $vals['fragment_instance_id'];
      }
    }
  }

  public function getName() {
    return 'TCancelPlanFragmentParams';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->protocol_version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->fragment_instance_id = new \TUniqueId();
            $xfer += $this->fragment_instance_id->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCancelPlanFragmentParams');
    if ($this->protocol_version !== null) {
      $xfer += $output->writeFieldBegin('protocol_version', TType::I32, 1);
      $xfer += $output->writeI32($this->protocol_version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fragment_instance_id !== null) {
      if (!is_object($this->fragment_instance_id)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fragment_instance_id', TType::STRUCT, 2);
      $xfer += $this->fragment_instance_id->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCancelPlanFragmentResult {
  static $_TSPEC;

  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => '\TStatus',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'TCancelPlanFragmentResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new \TStatus();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCancelPlanFragmentResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TTransmitDataParams {
  static $_TSPEC;

  public $protocol_version = null;
  public $dest_fragment_instance_id = null;
  public $dest_node_id = null;
  public $row_batch = null;
  public $eos = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'protocol_version',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'dest_fragment_instance_id',
          'type' => TType::STRUCT,
          'class' => '\TUniqueId',
          ),
        4 => array(
          'var' => 'dest_node_id',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'row_batch',
          'type' => TType::STRUCT,
          'class' => '\TRowBatch',
          ),
        6 => array(
          'var' => 'eos',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['protocol_version'])) {
        $this->protocol_version = $vals['protocol_version'];
      }
      if (isset($vals['dest_fragment_instance_id'])) {
        $this->dest_fragment_instance_id = $vals['dest_fragment_instance_id'];
      }
      if (isset($vals['dest_node_id'])) {
        $this->dest_node_id = $vals['dest_node_id'];
      }
      if (isset($vals['row_batch'])) {
        $this->row_batch = $vals['row_batch'];
      }
      if (isset($vals['eos'])) {
        $this->eos = $vals['eos'];
      }
    }
  }

  public function getName() {
    return 'TTransmitDataParams';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->protocol_version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->dest_fragment_instance_id = new \TUniqueId();
            $xfer += $this->dest_fragment_instance_id->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dest_node_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->row_batch = new \TRowBatch();
            $xfer += $this->row_batch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->eos);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TTransmitDataParams');
    if ($this->protocol_version !== null) {
      $xfer += $output->writeFieldBegin('protocol_version', TType::I32, 1);
      $xfer += $output->writeI32($this->protocol_version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dest_fragment_instance_id !== null) {
      if (!is_object($this->dest_fragment_instance_id)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('dest_fragment_instance_id', TType::STRUCT, 2);
      $xfer += $this->dest_fragment_instance_id->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dest_node_id !== null) {
      $xfer += $output->writeFieldBegin('dest_node_id', TType::I32, 4);
      $xfer += $output->writeI32($this->dest_node_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->row_batch !== null) {
      if (!is_object($this->row_batch)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('row_batch', TType::STRUCT, 5);
      $xfer += $this->row_batch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eos !== null) {
      $xfer += $output->writeFieldBegin('eos', TType::BOOL, 6);
      $xfer += $output->writeBool($this->eos);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TTransmitDataResult {
  static $_TSPEC;

  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => '\TStatus',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'TTransmitDataResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new \TStatus();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TTransmitDataResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


