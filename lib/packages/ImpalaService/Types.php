<?php
//namespace ;

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Exception\TApplicationException;


final class TImpalaQueryOptions {
  const ABORT_ON_ERROR = 0;
  const MAX_ERRORS = 1;
  const DISABLE_CODEGEN = 2;
  const BATCH_SIZE = 3;
  const NUM_NODES = 4;
  const MAX_SCAN_RANGE_LENGTH = 5;
  const MAX_IO_BUFFERS = 6;
  const NUM_SCANNER_THREADS = 7;
  const ALLOW_UNSUPPORTED_FORMATS = 8;
  const DEFAULT_ORDER_BY_LIMIT = 9;
  static public $__names = array(
    0 => 'ABORT_ON_ERROR',
    1 => 'MAX_ERRORS',
    2 => 'DISABLE_CODEGEN',
    3 => 'BATCH_SIZE',
    4 => 'NUM_NODES',
    5 => 'MAX_SCAN_RANGE_LENGTH',
    6 => 'MAX_IO_BUFFERS',
    7 => 'NUM_SCANNER_THREADS',
    8 => 'ALLOW_UNSUPPORTED_FORMATS',
    9 => 'DEFAULT_ORDER_BY_LIMIT',
  );
}

class TInsertResult {
  static $_TSPEC;

  public $rows_appended = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rows_appended',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I64,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rows_appended'])) {
        $this->rows_appended = $vals['rows_appended'];
      }
    }
  }

  public function getName() {
    return 'TInsertResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->rows_appended = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = '';
              $val6 = 0;
              $xfer += $input->readString($key5);
              $xfer += $input->readI64($val6);
              $this->rows_appended[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TInsertResult');
    if ($this->rows_appended !== null) {
      if (!is_array($this->rows_appended)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('rows_appended', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->rows_appended));
        {
          foreach ($this->rows_appended as $kiter7 => $viter8)
          {
            $xfer += $output->writeString($kiter7);
            $xfer += $output->writeI64($viter8);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


