<?php
//namespace ;

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Exception\TApplicationException;


class TPlanFragment {
  static $_TSPEC;

  public $plan = null;
  public $output_exprs = null;
  public $output_sink = null;
  public $partition = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        2 => array(
          'var' => 'plan',
          'type' => TType::STRUCT,
          'class' => '\TPlan',
          ),
        4 => array(
          'var' => 'output_exprs',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TExpr',
            ),
          ),
        5 => array(
          'var' => 'output_sink',
          'type' => TType::STRUCT,
          'class' => '\TDataSink',
          ),
        6 => array(
          'var' => 'partition',
          'type' => TType::STRUCT,
          'class' => '\TDataPartition',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['plan'])) {
        $this->plan = $vals['plan'];
      }
      if (isset($vals['output_exprs'])) {
        $this->output_exprs = $vals['output_exprs'];
      }
      if (isset($vals['output_sink'])) {
        $this->output_sink = $vals['output_sink'];
      }
      if (isset($vals['partition'])) {
        $this->partition = $vals['partition'];
      }
    }
  }

  public function getName() {
    return 'TPlanFragment';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->plan = new \TPlan();
            $xfer += $this->plan->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->output_exprs = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \TExpr();
              $xfer += $elem5->read($input);
              $this->output_exprs []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->output_sink = new \TDataSink();
            $xfer += $this->output_sink->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->partition = new \TDataPartition();
            $xfer += $this->partition->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TPlanFragment');
    if ($this->plan !== null) {
      if (!is_object($this->plan)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('plan', TType::STRUCT, 2);
      $xfer += $this->plan->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->output_exprs !== null) {
      if (!is_array($this->output_exprs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('output_exprs', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->output_exprs));
        {
          foreach ($this->output_exprs as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->output_sink !== null) {
      if (!is_object($this->output_sink)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('output_sink', TType::STRUCT, 5);
      $xfer += $this->output_sink->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->partition !== null) {
      if (!is_object($this->partition)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('partition', TType::STRUCT, 6);
      $xfer += $this->partition->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TScanRangeLocation {
  static $_TSPEC;

  public $server = null;
  public $volume_id = -1;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'server',
          'type' => TType::STRUCT,
          'class' => '\THostPort',
          ),
        2 => array(
          'var' => 'volume_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['server'])) {
        $this->server = $vals['server'];
      }
      if (isset($vals['volume_id'])) {
        $this->volume_id = $vals['volume_id'];
      }
    }
  }

  public function getName() {
    return 'TScanRangeLocation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->server = new \THostPort();
            $xfer += $this->server->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->volume_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TScanRangeLocation');
    if ($this->server !== null) {
      if (!is_object($this->server)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('server', TType::STRUCT, 1);
      $xfer += $this->server->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->volume_id !== null) {
      $xfer += $output->writeFieldBegin('volume_id', TType::I32, 2);
      $xfer += $output->writeI32($this->volume_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TScanRangeLocations {
  static $_TSPEC;

  public $scan_range = null;
  public $locations = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'scan_range',
          'type' => TType::STRUCT,
          'class' => '\TScanRange',
          ),
        2 => array(
          'var' => 'locations',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TScanRangeLocation',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['scan_range'])) {
        $this->scan_range = $vals['scan_range'];
      }
      if (isset($vals['locations'])) {
        $this->locations = $vals['locations'];
      }
    }
  }

  public function getName() {
    return 'TScanRangeLocations';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->scan_range = new \TScanRange();
            $xfer += $this->scan_range->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->locations = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \TScanRangeLocation();
              $xfer += $elem12->read($input);
              $this->locations []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TScanRangeLocations');
    if ($this->scan_range !== null) {
      if (!is_object($this->scan_range)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('scan_range', TType::STRUCT, 1);
      $xfer += $this->scan_range->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->locations !== null) {
      if (!is_array($this->locations)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('locations', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->locations));
        {
          foreach ($this->locations as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


